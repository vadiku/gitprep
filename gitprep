#!/usr/bin/env bash

########################
# Author: vadiku
# Date: 2023-02-11
###########################

version="0.0.4"

script_name=$(basename "$0")

usage() {
    cat <<EOF
Usage: $script_name [options]

  -h | --help                       print this help message
  -v | --version                    print utility version
  -p | --path      <path>           path to git repo to prepare; if not passed current directory is used
  -n | --name      <user_name>      user name to set to git config: git config user.name <user_name>
  -e | --email     <user_email>     user email to set to git config: git config user.email <user_email>
  -t | --ticket    <ticket_regex>   regex for the ticket to extract from the branch name
  -r | --rm                         remove selected options actions

Visit https://github.com/vadiku/gitprep for more information

EOF
}

# Define prepare-commit-msg hook template
read -d '' commit_hook_template << EOF
#!/bin/bash
FILE=\$1
MESSAGE=\$(cat \$FILE)
TICKET=\$(git rev-parse --abbrev-ref HEAD | grep -Eo '^(\w+/)?(?i)({{tickets}})[-][0-9]+' | grep -Eo '(?i)({{tickets}})[-][0-9]+' | tr "[:lower:]" "[:upper:]")
if [[ \$TICKET == "" ]];then
  echo "Branch does not contain ticket information, skipping commit"
  exit 1;
elif [[ \$MESSAGE == "Merge"* || "\$MESSAGE" == "\$TICKET"* ]];then
  exit 0;
else
  echo "\$TICKET \$MESSAGE" > \$FILE
fi
EOF

# Read command line options
while (($# > 0)); do # while arguments count>0
    case "$1" in
    -n | --name)
        user_name=$2
        name_param=true
        shift
        ;;
    -e | --email)
        user_email=$2
        email_param=true
        shift
        ;;
    -t | --ticket)
        tickets_regexp=$2
        ticket_param=true
        if [[ $tickets_regexp == "" ]]; then
            tickets_regexp="\\\w+"
        fi
        shift
        ;;
    -p | --path)
        repo_path=$2
        shift
        ;;
    -r | --rm)
        remove_param=true
        shift
        ;; 
    -h | --help)
        usage
        exit
        ;;
    -v | --version)
        echo ${version}
        exit
        ;;
    *) # unknown flag/switch
        POSITIONAL+=("$1")
        shift
        ;;
    esac
done

# Prepare git repo hook path
if [[ -z "$repo_path" ]]; then
    repo_path=""
else
    repo_path="$repo_path/"
fi

if [[ ! -d "$repo_path.git" ]]; then
    echo "'$repo_path' is not a git repository"
    exit 1;
fi

full_path_to_hook="$repo_path.git/hooks/prepare-commit-msg"

# Check what actions to apply and apply them accordingly
if [[ ! -z "$user_name" ]]; then
    git config user.name "$user_name"
fi

if [[ ! -z "$user_email" ]]; then
    git config user.email "$user_email"
fi
if [[ ! -z "$tickets_regexp" ]]; then
    tickets_template="{{tickets}}"
    commit_msg_hook=$(echo "$commit_hook_template" | sed -e "s/${tickets_template}/${tickets_regexp}/g")
    echo "$commit_msg_hook" > $full_path_to_hook
    chmod +x $full_path_to_hook
fi

# Apply remove parameter
if [[ $remove_param == true ]]; then
    if [[ $name_param == true ]]; then
        git config user.name ""
    fi

    if [[ $email_param == true ]]; then
        git config user.email ""
    fi

    if [[ $ticket_param == true ]]; then
        rm -f $full_path_to_hook
    fi
fi